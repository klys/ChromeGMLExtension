<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @description

width = 800;
height = 600;

surf_raw = undefined;
surf = undefined;
surf_update = false;

buff = buffer_create(width*height*4, buffer_fixed, 1);

/*if(scr_demo_check_if_ide()) { // running the project in the IDE doesn't work, so run a special test-mode if we detect that it's in IDE. Note: test mode is slower
	chromium_create_test(width, height, room_speed, buffer_get_address(buff));
}
else {
	chromium_create(width, height, room_speed, buffer_get_address(buff));
}*/

// EXPERIMENTAL FEATURE: requires the use of chromium_create_test, so we're rigging this to run create_test
chromium_create_test(width, height, room_speed, buffer_get_address(buff));
chromium_set_url("file:///html/test.html");

loaded = false;
lmb = false;
mmb = false;
rmb = false;

gui_url = "";
gui_can_back = false;
gui_can_forward = false;
gui_bg_fade = 0;

last_key = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @description
chromium_cleanup();
buffer_delete(buff);
surface_free(surf_raw);
surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @description

// get some statuses
loaded = chromium_get_isloaded();
gui_url = chromium_get_url();
gui_can_back = chromium_get_can_back();
gui_can_forward = chromium_get_can_forward();
if(loaded or gui_bg_fade &gt; 0.5) {
	gui_bg_fade = 0;
}
else {
	gui_bg_fade += 0.02;
}


// update cursor
var xx = mouse_x-x;
var yy = mouse_y-y;

// gui buttons
if(mouse_check_button_pressed(mb_left) and point_in_rectangle(mouse_x, mouse_y, x, y-40, x+50, y-5)) {
	chromium_back();
}
if(mouse_check_button_pressed(mb_left) and point_in_rectangle(mouse_x, mouse_y, x+55, y-40, x+105, y-5)) {
	chromium_forward();
}
if(mouse_check_button_pressed(mb_left) and point_in_rectangle(mouse_x, mouse_y, x+110, y-40, x+160, y-5)) {
	if(loaded) chromium_reload();
	else chromium_stop();
}
if(mouse_check_button_pressed(mb_left) and point_in_rectangle(mouse_x, mouse_y, x+165, y-40, x+745, y-5)) {
	buffer_fill(buff, 0, buffer_u8, $ff, width*height*4); // buffer must be zeroed, as the dll supports transparent draw
	var url = get_string("URL:", gui_url);
	if(url != "") chromium_set_url(url);
}
if(mouse_check_button_pressed(mb_left) and point_in_rectangle(mouse_x, mouse_y, x+750, y-40, x+800, y-5)) {
	buffer_fill(buff, 0, buffer_u8, $ff, width*height*4); // buffer must be zeroed, as the dll supports transparent draw
	var str = get_string("HTML:", "");
	if(str != "") chromium_set_string(str, "about:blank");
}

// send keystrokes (in a really hacky way, don't do this)
if(keyboard_key != last_key) {
	if(last_key != 0) {
	    chromium_event_keyboard(last_key, 0, false); // last key keyup
	}
	if(keyboard_key != 0) {
		chromium_event_keyboard(keyboard_key, scr_chromium_get_modifiers(), true);
		
		if(keyboard_key != vk_shift and keyboard_key != vk_control and keyboard_key != vk_alt) {
			chromium_event_keychar(ord(keyboard_lastchar));
		}
	}
	last_key = keyboard_key;
}


// cursor inside browser surface
if(point_in_rectangle(mouse_x, mouse_y, x, y, x+width, y+height)) {
	var mouse_event = false;
	
	// move mouse
	chromium_event_mousemove(xx, yy);
	
	// mouse press events
	if(mouse_check_button_pressed(mb_left)) {
		lmb = true;
		chromium_event_mousebutton(xx, yy, 0, true);
	}
	else if(mouse_check_button_released(mb_left)) {
		lmb = false;
		chromium_event_mousebutton(xx, yy, 0, false);
	}
	
	if(mouse_check_button_pressed(mb_middle)) {
		mmb = true;
		chromium_event_mousebutton(xx, yy, 1, true);
	}
	else if(mouse_check_button_released(mb_middle)) {
		mmb = false;
		chromium_event_mousebutton(xx, yy, 1, false);
	}
	
	if(mouse_check_button_pressed(mb_right)) {
		rmb = true;
		chromium_event_mousebutton(xx, yy, 2, true);
	}
	else if(mouse_check_button_released(mb_right)) {
		rmb = false;
		chromium_event_mousebutton(xx, yy, 2, false);
	}
	
	// TODO: keyboard stuff here
	
	// mouse wheel
	if(mouse_wheel_up()) {
		chromium_event_mousewheel(0, 100);	
	}
	else if(mouse_wheel_down()) {
		chromium_event_mousewheel(0, -100);
	}
	
	// recieve cursor
	window_set_cursor(scr_chromium_convert_cursor(chromium_get_cursor()));
	
}
else {
	window_set_cursor(cr_default);	
	
	// mouse release events that happen outside the window
	if(not mouse_check_button(mb_left) and lmb) {
		lmb = false;
		chromium_event_mousebutton(xx, yy, 0, false);
	}
	if(not mouse_check_button(mb_middle) and mmb) {
		mmb = false;
		chromium_event_mousebutton(xx, yy, 1, false);
	}
	if(not mouse_check_button(mb_right) and rmb) {
		rmb = false;
		chromium_event_mousebutton(xx, yy, 2, false);
	}
}


// render chromium
surf_update = chromium_step();

// deal with requests
if(chromium_check_source()) {
	show_message(chromium_get_source());
}
if(chromium_check_transfer()) {
	show_message(chromium_get_transfer());
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @description

// UI elements
if (gui_can_back) {
    draw_set_color(c_white)
} else draw_set_color(c_gray)

draw_rectangle(x, y-40, x+50, y-5, true);
draw_text(x+5, y-30, "BAK");
if (gui_can_forward) {
    draw_set_color(c_white);
} else draw_set_color(c_gray);

draw_rectangle(x+55, y-40, x+105, y-5, true);
draw_text(x+60, y-30, "FOR");
draw_set_color(c_white);
draw_rectangle(x+110, y-40, x+160, y-5, true);
if (loaded) {
    draw_text(x+115, y-30, "RLD");
} else draw_text(x+115, y-30, "STP");


draw_text(x+170, y-30, gui_url);
draw_set_alpha(gui_bg_fade);
draw_rectangle(x+165, y-40, x+745, y-5, false);
draw_set_alpha(1.0);
draw_rectangle(x+165, y-40, x+745, y-5, true);

draw_rectangle(x+750, y-40, x+800, y-5, true);
draw_text(x+755, y-30, "TXT");

// main surface
if(is_undefined(surf) or not surface_exists(surf)) { // create surface if it's not there
	surf = surface_create(width, height);
	surf_update = true;
}

// update the surface
if(surf_update) {
	surf_update = false;
	
	// browser outputs RGBA, but GM needs BGRA, use a surface and a shader to flip the channels efficiently
	// NOTE: this temporary surface only exists to facilitate any future shaders that are to be applied
	// to the browser.  If no other shaders are used, this temporary suface can be drawn directly instead
	if(is_undefined(surf_raw) or not surface_exists(surf_raw)) { // create surfaces if it's not there
		surf_raw = surface_create(width, height);
	}
	
	// throw buffer onto temporary surface
	buffer_set_surface(buff, surf_raw, 0, 0, 0);
	
	// draw temporary surface with bgr color flip shader
	surface_set_target(surf);
	shader_set(shd_bgr_flip);
	draw_surface(surf_raw,0,0);
	shader_reset();
	surface_reset_target();
}

// draw surface
draw_surface(surf,x,y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="121">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @description Request page source
chromium_request_source();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="117">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @description Call a function in the browser
// Watch out for escaping quotes when using this!
chromium_execute("this_function_triggered_from_gm(`"+json_encode(os_get_info())+"`);");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
